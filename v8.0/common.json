{
    "openapi": "3.0.0",
    "info": {
        "title": "common",
        "description": "This is not an API. This file has some common components, which will be referenced by actual api specifications.",
        "version": "v8.0"
    },
    "servers": [
        {
            "url": "https://zohoapis.com"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "operationId": "dummy",
                "responses": {
                    "204": {
                        "description": ""
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "API_Exception": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    }
                },
                "required": [
                    "status",
                    "code",
                    "message",
                    "details"
                ]
            },
            "info": {
                "type": "object",
                "properties": {
                    "per_page": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "more_records": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "per_page",
                    "page",
                    "count",
                    "more_records"
                ]
            },
            "UnsupportedVersionDetails": {
                "type": "object",
                "properties": {
                    "supported_version": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "supported_version"
                ]
            },
            "UnsupportedVersionError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "API_NOT_SUPPORTED"
                        ],
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/UnsupportedVersionDetails"
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "details",
                    "message",
                    "status"
                ]
            },
            "SuccessDetails": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "id"
                ]
            },
            "success": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "SUCCESS"
                        ],
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/SuccessDetails"
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "success"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "details",
                    "message",
                    "status"
                ]
            },
            "BodyErrorDetails": {
                "type": "object",
                "properties": {
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "api_name",
                    "json_path"
                ]
            },
            "NotAllowedError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "NOT_ALLOWED"
                        ],
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/BodyErrorDetails"
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "details",
                    "message",
                    "status"
                ]
            },
            "MandatoryError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "MANDATORY_NOT_FOUND"
                        ]
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ]
                    },
                    "details": {
                        "$ref": "#/components/schemas/BodyErrorDetails"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "status",
                    "details"
                ]
            },
            "RequiredDataMissingDetails": {
                "type": "object",
                "properties": {
                    "sub_json_path": {
                        "type": "string",
                        "nullable": true
                    },
                    "value": {
                        "type": "object",
                        "nullable": true
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "sub_json_path",
                    "value",
                    "api_name",
                    "json_path"
                ]
            },
            "RequiredDataMissingError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "REQUIRED_DATA_NOT_FOUND"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/RequiredDataMissingDetails"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "status",
                    "details"
                ]
            },
            "InvalidTypeDetails": {
                "type": "object",
                "properties": {
                    "expected_data_type": {
                        "type": "string"
                    },
                    "regex": {
                        "type": "string",
                        "nullable": true
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "expected_data_type",
                    "api_name",
                    "json_path"
                ]
            },
            "InvalidType": {
                "type": "object",
                "properties": {
                    "expected_data_type": {
                        "type": "string"
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "expected_data_type",
                    "api_name",
                    "json_path"
                ]
            },
            "InvalidTypeError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA"
                        ]
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InvalidTypeDetails"
                            },
                            {
                                "$ref": "#/components/schemas/InvalidType"
                            }
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ]
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "SupportedValueDetails": {
                "type": "object",
                "properties": {
                    "supported_values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "supported_values",
                    "api_name",
                    "json_path"
                ]
            },
            "InvalidParamDetails": {
                "type": "object",
                "properties": {
                    "supported_values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "param_name": {
                        "type": "string"
                    },
                    "param": {
                        "type": "string"
                    }
                },
                "required": [
                    "supported_values",
                    "param_name",
                    "param"
                ]
            },
            "InvalidValueDetails": {
                "type": "object",
                "properties": {
                    "regex": {
                        "type": "string",
                        "nullable": true
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "api_name",
                    "json_path"
                ]
            },
            "InvalidValueError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BodyErrorDetails"
                            },
                            {
                                "$ref": "#/components/schemas/InvalidValueDetails"
                            },
                            {
                                "$ref": "#/components/schemas/SupportedValueDetails"
                            }
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "InvalidIDError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "InvalidRegexError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/InvalidValueDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "InvalidUrlDetails": {
                "type": "object",
                "properties": {
                    "resource_path_index": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "resource_path_index"
                ]
            },
            "InvalidUrlError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA",
                            "INVALID_MODULE"
                        ]
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/InvalidUrlDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ]
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "ExpectedFieldMissingDetails": {
                "type": "object",
                "properties": {
                    "expected_fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BodyErrorDetails"
                        }
                    }
                },
                "required": [
                    "expected_fields"
                ]
            },
            "ExpectedFieldMissingError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "EXPECTED_FIELD_MISSING"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/ExpectedFieldMissingDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "AmbiguityDetails": {
                "type": "object",
                "properties": {
                    "ambiguity_due_to": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BodyErrorDetails"
                        }
                    }
                },
                "required": [
                    "ambiguity_due_to"
                ]
            },
            "AmbiguityError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "AMBIGUITY_DURING_PROCESSING"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/AmbiguityDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "DependentFieldDetails": {
                "type": "object",
                "properties": {
                    "dependee": {
                        "$ref": "#/components/schemas/BodyErrorDetails"
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "dependee",
                    "api_name",
                    "json_path"
                ]
            },
            "DependentFieldError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "DEPENDENT_FIELD_MISSING"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/DependentFieldDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "DependentMismatchError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "DEPENDENT_MISMATCH"
                        ]
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ]
                    },
                    "details": {
                        "$ref": "#/components/schemas/DependentFieldDetails"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "status",
                    "details"
                ]
            },
            "DuplicateError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "DUPLICATE_DATA"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/BodyErrorDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "ReservedKeywordError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "RESERVED_KEYWORD_NOT_ALLOWED"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/BodyErrorDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "MaxLengthDetails": {
                "type": "object",
                "properties": {
                    "maximum_length": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "maximum_length",
                    "api_name",
                    "json_path"
                ]
            },
            "MaxLengthError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/MaxLengthDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "MinLengthDetails": {
                "type": "object",
                "properties": {
                    "minimum_length": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "api_name": {
                        "type": "string"
                    },
                    "json_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "minimum_length",
                    "api_name",
                    "json_path"
                ]
            },
            "MinLengthError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/MinLengthDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "ParamDetails": {
                "type": "object",
                "properties": {
                    "param_name": {
                        "type": "string"
                    },
                    "param": {
                        "type": "string"
                    }
                },
                "required": [
                    "param_name",
                    "param"
                ]
            },
            "MandatoryParamError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "REQUIRED_PARAM_MISSING"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "$ref": "#/components/schemas/ParamDetails"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "InvalidParamError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "INVALID_DATA",
                            "INVALID_MODULE"
                        ]
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "$ref": "#/components/schemas/ParamDetails"
                            }
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ]
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            },
            "PermissionError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "NO_PERMISSION"
                        ],
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "details": {
                        "type": "object",
                        "properties": {
                            "permissions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "permissions"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "status"
                ]
            }
        },
        "securitySchemes": {
            "iam-oauth2-schema": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://accounts.zoho.com/oauth/v2.0/auth",
                        "tokenUrl": "https://accounts.zoho.com/oauth/v2.0/token",
                        "refreshUrl": "https://accounts.zoho.com/oauth/v2.0/token",
                        "scopes": {
                            "ZohoCRM.settings.map_dependency.ALL": "Configure and manage dependencies between CRM fields.",
                            "ZohoCRM.settings.currencies.all": "Create and manage currencies within your Zoho CRM.",
                            "ZohoCRM.settings.modules.read": "Retrieve Zoho CRM modules specific information.",
                            "ZohoCRM.settings.modules.all": "Perform actions on Zoho CRM modules.",
                            "ZohoCRM.settings.custom_views.All": "To access and manipulate custom view metadata.",
                            "ZohoCRM.settings.currencies.create": "Create and manage currencies within your Zoho CRM.",
                            "ZohoCRM.settings.fields.read": "Retrieve fields metadata for different modules in the CRM org",
                            "ZohoCRM.settings.fiscal_year.READ": "Retrieve and update fiscal year data in your org.",
                            "ZohoCRM.settings.all": "Retrieve specific or all CRM metadata.",
                            "ZohoCRM.settings.intelligence.All": "Initialize and retrieve organization-level data enrichment.",
                            "ZohoCRM.settings.fields.all": "Access and manipulate field metadata for different modules in the CRM org.",
                            "ZohoCRM.modules.READ": "Retrieve Zoho CRM modules details.",
                            "ZohoCRM.settings.roles.ALL": "Manipulate and manage roles in your Zoho CRM.",
                            "ZohoCRM.settings.variables.read": "Retrieve Zoho CRM variables.",
                            "ZohoCRM.settings.profiles.read": "Retrieve profiles in your Zoho CRM.",
                            "ZohoCRM.modules.attachments.all": "Create and manage attachments.",
                            "ZohoCRM.settings.related_lists.read": "Retrieve the metadata of the related lists for a specific module.",
                            "ZohoCRM.settings.layouts.read": "Retrieve metadata of a layout for a specific module.",
                            "ZohoCRM.settings.roles.read": "Manipulate and manage roles in your Zoho CRM.",
                            "ZohoCRM.settings.profiles.all": "Access and manage profiles in your Zoho CRM.",
                            "ZohoCRM.modules.notes.all": "Create and manage Notes.",
                            "ZohoCRM.share.{module_api_name}.DELETE": "Create and share records in a module with other users.",
                            "ZohoCRM.settings.territories.ALL": "Access and manipulate territories metadata",
                            "ZohoCRM.bulk.all": "Perform bulk actions with the multiple records in a module in your Zoho CRM.",
                            "ZohoCRM.settings.currencies.all": "Create and manage currencies in your organization",
                            "ZohoCRM.mass_convert.SalesOrders.CREATE": "Convert multiple records in the Sales Orders module to a specified module.",
                            "ZohoCRM.share.{module_api_name}.ALL": "Create and share records in a module with other users in the organization.",
                            "ZohoCRM.share.{module_api_name}.READ": "Retrieve the shared records in a module with other users in the organization.",
                            "ZohoCRM.users.all": "Create and manage users and their access in your Zoho CRM organization.",
                            "ZohoCRM.modules.leads.all": "Create and manage records in the Leads module.",
                            "ZohoCRM.mass_convert.Quotes.READ": "Retrieve the multiple converted records in the Quotes module to a specified module and retrieve the status.",
                            "ZohoCRM.settings.variable_groups.all": "Perform all variable group related action allowed metadata.",
                            "ZohoCRM.settings.currencies.read": "Retrieve currencies within your Zoho CRM.",
                            "ZohoCRM.settings.variable_groups.read": "Retrieve variable group metadata.",
                            "ZohoCRM.settings.fiscal_year.UPDATE": "Update fiscal year data in your org.",
                            "ZohoCRM.settings.variables.all": "Manipulate Zoho CRM variables.",
                            "ZohoCRM.org.all": "Manage and manipulate your org information.",
                            "ZohoCRM.settings.tags.all": "Access and manipulate tags.",
                            "ZohoCRM.modules.deals.all": "Create and manage records in the Deals module.",
                            "ZohoCRM.settings.recycle_bin.DELETE": "Permanently delete records from the Recycle Bin in your Zoho CRM.",
                            "ZohoCRM.share.{module_api_name}.CREATE": "Create and share records in a module with other users in the organization.",
                            "ZohoCRM.settings.emails.READ": "Retrieve email settings in your organization.",
                            "ZohoCRM.settings.currencies.update": "Manage and update currencies within your Zoho CRM.",
                            "ZohoCRM.settings.layouts.all": "Access and manipulate the metadata of a layout for a specific module.",
                            "ZohoCRM.settings.audit_logs.CREATE": "Create an export audit log job.",
                            "ZohoCRM.settings.recycle_bin.READ": "Retrieve records from the Recycle Bin in your Zoho CRM.",
                            "ZohoCRM.zia.enrichment.ALL": "Enhance and enrich your CRM records with additional data and insights using Zia.",
                            "ZohoCRM.files.CREATE": "Upload files in your Zoho CRM.",
                            "ZohoCRM.settings.related_lists.all": "Retrieve the metadata of the related lists for a specific module.",
                            "ZohoCRM.modules.contacts.all": "Create and manage records in the Contacts module.",
                            "ZohoCRM.settings.wizards.all": "Retrieve wizards' information within a module.",
                            "ZohoCRM.modules.attachments.read": "Retrieve attachments in a module.",
                            "ZohoCRM.settings.unsubscribe.ALL": "Access and manage unsubscribe links, and their associations.",
                            "ZohoCRM.mass_convert.SalesOrders.READ": "Retrieve multiple records in the Salesorders module to a specified module.",
                            "ZohoCRM.modules.emails.READ": "Retrieve emails in Zoho CRM.",
                            "ZohoCRM.share.{module_api_name}.UPDATE": "Update the shared records in a module with other users in the organization.",
                            "ZohoCRM.mass_convert.Quotes.CREATE": "Create multiple converted records in the Quotes module to a specified module."
                        }
                    }
                }
            }
        }
    }
}
